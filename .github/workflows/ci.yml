name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Build application
        run: pnpm run build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Run unit tests
        run: pnpm test

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Run E2E tests
        env:
          DATABASE_URL: "postgresql://hermes:password@localhost:5432/hermes?schema=public"
        run: pnpm run test:e2e

  publish:
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t hermes:latest .

      - name: Tag Docker image
        run: docker tag hermes:latest trustprovenance/hermes:latest

      - name: Push Docker image
        run: docker push trustprovenance/hermes:latest

  publish-openapi:
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Publish OpenAPI Spec to Postman
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          COLLECTION_UID: "16535309-c78bb35d-c24d-4843-953e-57516e49d0f5"
        run: |
          # Define variables
          OPENAPI_SPEC_PATH="path/to/your/openapi.yaml"
          POSTMAN_API_URL="https://api.getpostman.com/collections/$COLLECTION_UID"
          POSTMAN_API_KEY=$POSTMAN_API_KEY

          # Convert OpenAPI to Postman Collection (using openapi-to-postmanv2)
          npx openapi-to-postmanv2 convert -s ./openapi.json -o postman_collection.json -p

          # Read the generated collection
          COLLECTION_JSON=$(cat postman_collection.json)

          # Create the body for the POST request
          POST_BODY=$(jq -n --argjson collection "$COLLECTION_JSON" '{collection: $collection}')

          # Update the collection in Postman
          curl -X PUT $POSTMAN_API_URL \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$POST_BODY"
