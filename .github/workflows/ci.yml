name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Build application
        run: pnpm run build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Run unit tests
        run: pnpm test

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Run E2E tests
        env:
          DATABASE_URL: "postgresql://hermes:password@localhost:5432/hermes?schema=public"
        run: pnpm run test:e2e

  publish:
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t hermes:latest .

      - name: Tag Docker image
        run: docker tag hermes:latest truststack/hermes:latest

      - name: Push Docker image
        run: docker push truststack/hermes:latest

  # publish-openapi:
  #   runs-on: ubuntu-latest
  #   needs: e2e-tests
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "20"

  #     - name: Determine API Version
  #       id: api_version
  #       run: echo "::set-output name=version::$(echo ${GITHUB_SHA:0:10})"

  #     - name: Install SwaggerHub CLI
  #       run: npm i -g swaggerhub-cli

  #     - name: Publish to SwaggerHub (with set-default)
  #       if: github.ref == 'refs/heads/main'
  #       run: swaggerhub api:create trust-provenance/hermes/${{ steps.api_version.outputs.version }} --file openapi.json --setdefault
  #       env:
  #         SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}

  #     - name: Publish to SwaggerHub (without set-default)
  #       if: github.ref != 'refs/heads/main'
  #       run: swaggerhub api:create trust-provenance/hermes/${{ steps.api_version.outputs.version }} --file openapi.json
  #       env:
  #         SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}
